# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_asPqoUgLngGAc7B7bBahNsSDnEGdLn
"""

from google.colab import files
uploaded=files.upload()

# Import libraries
import numpy as np
import pandas as pd

# Import dataset
df = pd.read_csv("iris.csv")

df['Species'].unique()

# Import label encoder
from sklearn import preprocessing

# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()

# Encode labels in column 'species'.
df['Species']= label_encoder.fit_transform(df['Species'])

df['Species'].unique()

df.head()

df.sample(10)

df.columns

#The first one is the number of rows and
# the other one is the number of columns.
df.shape

print(df)

#data[start:end]
#start is inclusive whereas end is exclusive
print(df[10:21])
# it will print the rows from 10 to 20.

# you can also save it in a variable for further use in analysis
sliced_data=df[10:21]
print(sliced_data)

#here in the case of Iris dataset
#we will save it in a another variable named "specific_data"

specific_data=df[["Species"]]
#data[["column_name1","column_name2","column_name3"]]

#now we will print the first 10 columns of the specific_data dataframe.
print(specific_data.head(10))

#here we will use iloc

df.iloc[5]
#it will display records only with species "Iris-setosa".
df.loc[df["Species"] == "Iris-setosa"]

#In this dataset we will work on the Species column, it will count number of times a particular species has occurred.
df["Species"].value_counts()
#it will display in descending order.

# data["column_name"].sum()

sum_data = df["Sepal.Length"].sum()
mean_data = df["Sepal.Length"].mean()
median_data = df["Sepal.Length"].median()

print("Sum:",sum_data, "\nMean:", mean_data, "\nMedian:",median_data)

min_data=df["Sepal.Length"].min()
max_data=df["Sepal.Length"].max()

print("Minimum:",min_data, "\nMaximum:", max_data)

# For example, if we want to add a column let say "total_values",
# that means if you want to add all the integer value of that particular
# row and get total answer in the new column "total_values".
# first we will extract the columns which have integer values.
cols = df.columns

# it will print the list of column names.
print(cols)

# we will take that columns which have integer values.
cols = cols[1:5]

# we will save it in the new dataframe variable
df1 = df[cols]

# now adding new column "total_values" to dataframe data.
df["total_values"]=df1[cols].sum(axis=1)

# here axis=1 means you are working in rows,
# whereas axis=0 means you are working in columns.

#this is an example of rendering a datagram,
#which is not visualised by any styles.
df.style

# we will here print only the top 10 rows of the dataset,
# if you want to see the result of the whole dataset remove
#.head(10) from the below code

df.head(10).style.highlight_max(color='lightgreen', axis=0)

df.head(10).style.highlight_max(color='lightgreen', axis=1)

df.head(10).style.highlight_max(color='lightgreen', axis=None)

df.isnull()
#if there is data is missing, it will display True else False.

import seaborn as sns

iris = sns.load_dataset("iris")
sns.heatmap(iris.corr(), linecolor = 'white', linewidths = 1)

sns.heatmap(iris.corr(), linecolor = 'white', linewidths = 1, annot = True )

df.corr(method='pearson')

g = sns.pairplot(df,hue="Species")

df.corr(method='pearson')

g = sns.pairplot(df,hue="Species")

import matplotlib.pyplot as plt

df = pd.read_csv("Iris.csv")

print (data.head(10))

df.describe()

df.info()

plt.figure(figsize = (10, 7))
x = df["Sepal.Length"]

plt.hist(x, bins = 20, color = "green")
plt.title("Sepal Length in cm")
plt.xlabel("Sepal_Length_cm")
plt.ylabel("Count")

plt.figure(figsize = (10, 7))
x = df["Sepal.Width"]

plt.hist(x, bins = 20, color = "green")
plt.title("Sepal Width in cm")
plt.xlabel("Sepal_Width_cm")
plt.ylabel("Count")

plt.show()

plt.figure(figsize = (10, 7))
x = df["Petal.Length"]

plt.hist(x, bins = 20, color = "green")
plt.title("Petal Length in cm")
plt.xlabel("Petal_Length_cm")
plt.ylabel("Count")

plt.show()

plt.figure(figsize = (10, 7))
x = df["Petal.Width"]

plt.hist(x, bins = 20, color = "green")
plt.title("Petal Width in cm")
plt.xlabel("Petal_Width_cm")
plt.ylabel("Count")

plt.show()

plt.figure(figsize = (10, 7))
df.boxplot()

plt.plot(df["Sepal.Length"], "r--")
plt.show

df.plot(kind ="scatter",
		x ='Sepal.Length',
		y ='Petal.Length')
plt.grid()

import seaborn as sns

df = sns.load_dataset('iris')

# style used as a theme of graph
# for example if we want black
# graph with grid then write "darkgrid"
sns.set_style("whitegrid")

# sepal_length, petal_length are iris
# feature data height used to define
# Height of graph whereas hue store the
# class of iris dataset.
sns.FacetGrid(df, hue ="species",
			height = 6).map(plt.scatter,
							'sepal_length',
							'petal_length').add_legend()

"""#**Overall Insights:**

**The dataset appears to be well-structured and clean, with no missing values.
Feature distributions: Sepal length and petal length have distinct clusters, indicating potential differences between species.
Correlation analysis: Features like petal length and petal width show strong positive correlations.
Pair plots: These plots provide a visual understanding of how features relate to each other, especially when color-coded by species. For example, setosa species typically has distinct features compared to versicolor and virginica.**
"""